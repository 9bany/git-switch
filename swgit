#!/usr/bin/env bash

function main() {
    echo "SWGIT: SWITCH GIT";

    # global 
    local SWGIT_ARG=()
    local SSH_KEY_LOCATE="$HOME/.ssh/id_"
    local SSH_KEY_LOCATE_CONFIG="$HOME/.ssh/config"
    local SSH_KEY_LOCATE_CONFIG_E="$HOME/.ssh/config-e"
    local SSH_KEYGEN_TYPE="rsa"
    local SWGIT_LOCATE="$HOME/.swgit"
    local OVERWRITE=0
    local GIT_CONFIG_LOCATE="$HOME/.gitconfig"
    # required(): void
    # check git has been installed.
    function required() {
        git --version 2>&1 >/dev/null 
        GIT_IS_AVAILABLE=$?
        if [ $GIT_IS_AVAILABLE -eq 0 ]; 
        then
            printf "";
        else
            echo "Git have not install";
            exit;
        fi
    }

    # create_account(): email: string, username: string
    # create an account with email: create ssh key, update git config with new account.
    function create_account() {
        if [ "$#" -ne 2 ]; then
            echo "Command failed";
            echo "Usage: swgit -a <username> <email>";
            exit;
        fi
        if [ "${#SWGIT_ARG[*]}" -gt 1 ] || [ "${#SWGIT_ARG[*]}" -ge 1 -a "${#GIT_ACC[*]}" -ge 1 ]; then
            echo "Wrong: Mutiple Parameters!!\nnn"
            # Echo_CoEElor r 'Wrong: Mutiple Parameters!!\n' # too many input args or accounts 
        return
        else       
            case "${SWGIT_ARG[*]}" in 'add_account')
                creat_ssh_key "$@";
                
            ;;
            esac
        fi

    }

    # delete_account(): email: string, username: string
    # delete account: delete ssh key, delete account info in git config.
    function delete_account() {
        echo "Delete ac account";
    }

    # switch account: username
    # switch to another accont github.
    function switch_account() {
        if [ "$#" -ne 1 ]; then
            echo "Command failed";
            echo "Usage: swgit -s <username>";
            exit;
        fi

        echo  "Switch account git";
        local identityOrigin=$(grep 'IdentityFile' $SSH_KEY_LOCATE_CONFIG | sed 's/^.* //');
        
        local fomat=identity.$1:
        local identityNew=$(grep $fomat $SWGIT_LOCATE | sed 's/^.*: //');

        local identityNewRegex=$(echo "$identityNew" | sed 's/\//\\\//g' | sed 's/\./\\\./g'| sed 's/\~/\\\~/g');
        local identityOriginRegex=$(echo "$identityOrigin" | sed 's/\//\\\//g' | sed 's/\./\\\./g'| sed 's/\~/\\\~/g');
        
        local regexFilter=s\/$identityOriginRegex/$identityNewRegex\/g
        sed -i -e $regexFilter $SSH_KEY_LOCATE_CONFIG
        git_config_global $1;

    }
    
    # reconfig git username and emai global variable.
    function git_config_global() {

        local emailOrigin=$(grep 'email = ' $GIT_CONFIG_LOCATE | sed 's/^.* //');
        local userNameOrigin=$(grep 'name = ' $GIT_CONFIG_LOCATE | sed 's/^.* //');
       
        local emailOriginRegex=$(echo "$emailOrigin" | sed 's/\//\\\//g' | sed 's/\./\\\./g'| sed 's/\~/\\\~/g');
        local userNameOriginRegex=$(echo "$userNameOrigin" | sed 's/\//\\\//g' | sed 's/\./\\\./g'| sed 's/\~/\\\~/g');

        local usernameFormat=username.$1:
        local usernameNew=$(grep $usernameFormat $SWGIT_LOCATE | sed 's/^.*: //');

        local emailFormat=email.$1:
        local emailNew=$(grep $emailFormat $SWGIT_LOCATE | sed 's/^.*: //');

        local usernameNewRegex=$(echo "$usernameNew" | sed 's/\//\\\//g' | sed 's/\./\\\./g'| sed 's/\~/\\\~/g');
        local emailNewRegex=$(echo "$emailNew" | sed 's/\//\\\//g' | sed 's/\./\\\./g'| sed 's/\~/\\\~/g');

        local regexFilterName=s\/$userNameOriginRegex/$usernameNewRegex\/g;
        local regexFilterEmail=s\/$emailOriginRegex/$emailNewRegex\/g
        sed -i -e $regexFilterName $GIT_CONFIG_LOCATE
        sed -i -e $regexFilterEmail $GIT_CONFIG_LOCATE
    }

    # auto run switch account
    function auto_switch_account() {
        echo  "Auto switch account";
    }

    # Switch accounts and forward commanc to git
    function git_middleware() {
        echo "swgit middleware";
    }

    # reset config default
    # return config to before use this tool.
    function reset(){
        echo "Reset defaut setting";
        if [ ! -f $SSH_KEY_LOCATE_CONFIG_E ]; then
            echo "File not found!"
        else 
            echo yes | cp -rf $SSH_KEY_LOCATE_CONFIG_E $SSH_KEY_LOCATE_CONFIG
        fi
    }

    # list user 
    function list_users() {
        local users_info=$(grep 'username.*:' $SWGIT_LOCATE)
        echo $users_info;
    }

    # identity_user
    # print user indenntity ssh key path
    function identity_user() {
        if [ "$#" -ne 1 ]; then
            echo "Command failed";
            echo "Usage: swgit -i <username>";
            exit;
        fi
        local fomat=$1.identity:
        local identity=$(grep $fomat $SWGIT_LOCATE | sed 's/^.*: //')
        echo $identity;
    }

    #
    # backward apis
    #

    # check arg in command
    function check_command_line() {
        if [ "$#" -gt 0 ]; 
        then
            while [ "$#" -gt 0 ]; do
            case "$1" in
                '-h'|'--help')
                    help;
                    unset -f help;
                    return 1
                ;;
                '-a'|'--create_account')
                    SWGIT_ARG+='add_account'
                    shift 1
                    create_account $@;
                    return 1
                ;;
                '-l'|'--list')
                    list_users;
                    return 1
                ;;

                '-i'|'--identity')
                    shift 1
                    identity_user $@;
                    return 1
                ;;

                '-s'|'--switch')
                    shift 1
                    switch_account $@;
                    return 1
                ;;
                '-rt'|'--resotre_ssh')
                    shift 1
                    reset;
                    return 1
                ;;
            esac
            done
        else 
            help;
            unset -f help;
            exit;
        fi
    }

    # help_script
    function help(){
        printf "
Usage: -<option> <curl>

Options:
    -h, --help              Show help                                               [boolean]
    -v, --version           Show version number                                     [boolean]
    -a, --create_account    Create new account                                      [string, string] = [username, email]
    -l, --list              Show list user                                          [boolean]
    -i, --identity          Show identity of the user                               [string] = [username]
    -s, --switch            Switch to the another user                              [string] = [username]
    -rt, --resotre_ssh      Reset your old ssh config                               [boolean]
"

    }

    # create ssh key: email, username
    function creat_ssh_key() {
        echo "Create ssh key";
        local email=$2;
        local username=$1;
        
        # run create ssh key
        SSH_KEY_LOCATE="$SSH_KEY_LOCATE${SSH_KEYGEN_TYPE}_"
        ssh-keygen -t $SSH_KEYGEN_TYPE -C "$email" -f "$SSH_KEY_LOCATE$username"
        cat "$SSH_KEY_LOCATE$username.pub"

        swgit_add_account $username $email;
        
    }

    # swigt add account 
    function swgit_add_account() {
        local username=$1
        local email=$2
        
        if [ $OVERWRITE = 0 ]; then
            echo "[$username]" >> "$SWGIT_LOCATE";
            echo "username.$username: $username" >> "$SWGIT_LOCATE";
            echo "email.$username: $email" >> "$SWGIT_LOCATE";
            echo "identity.$username: $SSH_KEY_LOCATE$username" >> "$SWGIT_LOCATE";
        fi
    }

    # Delete ssh key: email, username
    function delete_ssh_key() {
        echo "Delete ssh key";
    }

    # get current account: ()account
    function get_current_account() {
        echo "Get current account";
    }

    # get git config: text file
    function get_git_config() {
        echo "Get git config ";
    }

    # get ssh config: txt file
    function get_ssh_config() {
        echo "Get ssh account";
    }

    # question Yes/No: boolen
    function ask_yn() {
        echo "Ash y/n";
    }
    required;
    check_command_line "$@";
}

main "$@";